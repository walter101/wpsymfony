# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    app.mytestservice:
        class: AppBundle\Controller\ServiceController
        public: true
#        arguments: ['@AppBundle\Controller\ServiceController']

    app.RandomCity:
        public: true
        class: AppBundle\MyService\RandomCityService
        arguments: ['@app.TextMarup']

    app.TextMarup:
        public: true
        class: AppBundle\MyService\TextMarkupService

    app.servicetester:
        public: true
        class: AppBundle\MyService\servicetester\servicetester


    # Deze listener heeft meedere functies.
    # Elke functie wordt middels tags verbonden aan een evetn
    # Zo kun je meedere (gerelateerde) events in een listener class afhandelen.

    # event: kernel.view: Deze listener triggerd als een controller geen response object aflevert
    # kernel.response: Deze listener triggerd nadat de controller een response object afgelevert, maar nog niet is verzonden naar de client, dus je kunt hem dan nog aanpassen
    # kernel.controller: Deze listener triggerd net voordat een controller wordt uitgevoerd. Je kunt dan nog iets doen, en daana wordt de controller uitgevoerd met als result: de response
#    AppBundle\EventListeners\ExceptionListener:
#        tags:
#            - { name: kernel.event_listener, event: kernel.response }
#            - { name: kernel.event_listener, event: kernel.view }
#            - { name: kernel.event_listener, event: kernel.controller }
#            - { name: kernel.event_listener, event: kernel.request }
#            - { name: kernel.event_listener, event: kernel.terminate }

